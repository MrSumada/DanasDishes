{"ast":null,"code":"var _jsxFileName = \"/Users/adampayne/Desktop/code/personal/recip-me/src/components/Ingredients.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Ingredients = _ref => {\n  let {\n    recipe\n  } = _ref;\n  // const [boxChecked, setBoxChecked] = useState(false);\n\n  function handleChange(e) {\n    let isChecked = e.target.checked;\n    console.log(\"checked\");\n    if (e.target.checked) {\n      setBoxChecked(true);\n    } else {\n      setBoxChecked(false);\n    }\n  }\n  return recipe.ingredients.map((ingredient, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: `ingredient-${i}`\n      // checked={if (boxChecked) ? true : false} \n      ,\n      onChange: e => handleChange(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: `ingredient-${i}`,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"amount\",\n        children: recipe.ingredients[i].quantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 44\n      }, this), recipe.ingredients[i].name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, i, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this));\n};\n_c = Ingredients;\nexport default Ingredients;\nvar _c;\n$RefreshReg$(_c, \"Ingredients\");","map":{"version":3,"names":["React","useState","Ingredients","recipe","handleChange","e","isChecked","target","checked","console","log","setBoxChecked","ingredients","map","ingredient","i","quantity","name"],"sources":["/Users/adampayne/Desktop/code/personal/recip-me/src/components/Ingredients.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst Ingredients = ({ recipe }) => {\n    \n    // const [boxChecked, setBoxChecked] = useState(false);\n    \n    function handleChange(e) {\n        let isChecked = e.target.checked\n        console.log(\"checked\")\n        if (e.target.checked) {\n            setBoxChecked(true);\n        } else {\n            setBoxChecked(false);\n        }\n    }\n\n    return (recipe.ingredients.map((ingredient, i) => \n        <p key={i}>\n            <input type=\"checkbox\" id={`ingredient-${i}`} \n            // checked={if (boxChecked) ? true : false} \n            onChange={e => handleChange(e)}\n            ></input>\n            <label for={`ingredient-${i}`}><span className=\"amount\">{recipe.ingredients[i].quantity}</span>{recipe.ingredients[i].name}</label>\n        </p>\n        )\n    )\n}\n\nexport default Ingredients;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,MAAMC,WAAW,GAAG,QAAgB;EAAA,IAAf;IAAEC;EAAO,CAAC;EAE3B;;EAEA,SAASC,YAAY,CAACC,CAAC,EAAE;IACrB,IAAIC,SAAS,GAAGD,CAAC,CAACE,MAAM,CAACC,OAAO;IAChCC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtB,IAAIL,CAAC,CAACE,MAAM,CAACC,OAAO,EAAE;MAClBG,aAAa,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACHA,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ;EAEA,OAAQR,MAAM,CAACS,WAAW,CAACC,GAAG,CAAC,CAACC,UAAU,EAAEC,CAAC,kBACzC;IAAA,wBACI;MAAO,IAAI,EAAC,UAAU;MAAC,EAAE,EAAG,cAAaA,CAAE;MAC3C;MAAA;MACA,QAAQ,EAAEV,CAAC,IAAID,YAAY,CAACC,CAAC;IAAE;MAAA;MAAA;MAAA;IAAA,QACtB,eACT;MAAO,GAAG,EAAG,cAAaU,CAAE,EAAE;MAAA,wBAAC;QAAM,SAAS,EAAC,QAAQ;QAAA,UAAEZ,MAAM,CAACS,WAAW,CAACG,CAAC,CAAC,CAACC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAQ,EAACb,MAAM,CAACS,WAAW,CAACG,CAAC,CAAC,CAACE,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA,GAL/HF,CAAC;IAAA;IAAA;IAAA;EAAA,QAML,CACH;AAET,CAAC;AAAA,KAxBKb,WAAW;AA0BjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}